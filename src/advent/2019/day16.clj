(ns advent.2019.day16)

(def input
  (->> "59790132880344516900093091154955597199863490073342910249565395038806135885706290664499164028251508292041959926849162473699550018653393834944216172810195882161876866188294352485183178740261279280213486011018791012560046012995409807741782162189252951939029564062935408459914894373210511494699108265315264830173403743547300700976944780004513514866386570658448247527151658945604790687693036691590606045331434271899594734825392560698221510565391059565109571638751133487824774572142934078485772422422132834305704887084146829228294925039109858598295988853017494057928948890390543290199918610303090142501490713145935617325806587528883833726972378426243439037"
       seq
       (map str)
       (mapv #(Integer/parseInt %))))

(defn ones-digit [i]
  (-> i
      str
      last
      str
      Integer/parseInt))

(defn pattern [i n]
  (->> [0 1 0 -1]
       (map #(repeat (inc i) %))
       repeat
       flatten
       rest
       (take n)))

(defn phase-digits [digits i]
  (let [p (pattern i (count digits))]
    (->> (map * digits p)
         (reduce + 0)
         ones-digit)))

(defn phase [digits]
  (map #(phase-digits digits %) (range (count digits))))

(defn run []
  (->> (loop [digits input
              n 100]
         (if (pos? n)
           (recur (phase digits) (dec n))
           digits))
       (take 8)
       (apply str)))